install.packages("E:/softwares/R/SDSFoundations_1.1.zip", repos = NULL, type = "win.binary")
library("SDSFoundations", lib.loc="~/R/win-library/3.4")
13+5
source('~/.active-rstudio-document')
a=13
a
remove(a)
y <- 1:10
y <- 1:10
x1 <- as.integer(2.00)
my.name <- as.integer(2.00)
my.number <- as.integer(readline(prompt = "Enter name:"))
for(i in c(1:nrow(my.number))){
my.number <- as.integer(readline(prompt = "Enter number:"))
}
install.packages("E:/softwares/R/SDSFoundations_1.1.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/user/Desktop/caret_6.0-82.zip", repos = NULL, type = "win.binary")
library(caret)
version
install.packages("tm")
install.packages("wordcloud")
install.packages("gmodels")
install.packages("e1071")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("e1071")
install.packages("randomForest")
install.packages("animation")
install.packages("neuralnet")
install.packages("boot")
install.packages("plyr")
install.packages("matrixStats")
clr
clear
cls
library(swirl)
swirl()
0
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1<- Sys.time()
t1
class(t1)
t2 <- as.POSIXlt(Sys.time())
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
4
t4
class(t4)
Sys.time() - t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_list<- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, mean)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
a= 1:10
a
b= seq(2,10,length.out = 10)
b
c= c(rep("Supriyo",5),rep("Bittu",5))
matrix1= cbind(a,b,c)
matrix2=rbind(a,b,c)
View(matrix2)
View(matrix1)
View(matrix2)
data1= data.frame(a=a,b=b,c=c)
View(data1)
str(data1)
matrix1[4,3]
View(matrix2)
View(matrix1)
data1[,c(1,2)
data1[,c(1,2)]
data1[,c(1,2)]
data1[-c(6,7),]
data1$b
data1[data1$a>4]
data1[data1$a>4,]
write.csv(data1,"practice.csv")
data2= read.csv("practice.csv")
View(data2)
View(data1)
View(data2)
write.csv(data1,"practice.csv", row.names = FALSE)
data2= read.csv("practice.csv")
View(data2)
data3= as.data.frame(matrix2)
str(data3)
clr
data3= as.data.frame(matrix1)
str(data3)
fy <-rep(c(1999,1991,2001),3)
company <- c(rep("png",3),rep("hul",3),rep("marico",3))
revenue <- c(1123,1254,4561,1423,1568,12369,1587,12458,4578)
margin <- c(11,12,13,14,15,16,17,18,19)
Data <- data.frame(fy, company, revenue,margin)
install.packages("dplyr")
library(dplyr)
View(Data)
myresults <- Data %>% group_by(company) %>%  mutate(highestMargin= max(margin), lowestMargin= max(margin))
View(myresults)
View(Data)
myresults1 <- Data %>% group_by(fy) %>%  mutate(highestMargin= max(revenue), lowestMargin= max(revenue))
View(myresults1)
myresults1 <- Data %>% group_by(fy) %>%  summarise(highestMargin= max(revenue), lowestMargin= max(revenue))
Data$cost= Data$revenue*(100-Data$margin)/100
View(Data)
Data$costcat= ifelse(Data$cost> 10000, "High", ifelse(Data$cost>5000,"Medium", "Low"))
View(Data)
Data$avgmargin=ifelse(Data$margin>12, "HighProfit","Lowprofit")
View(Data)
for(i in 1:dim(Data)[1]){
Data$margin[i]=Data$margin[i]+i
}
View(Data)
for(i in 1:dim(Data)[1]){
Data$margin[i]=Data$margin[i]+i
}
View(Data)
a= 1:1000
a
Data <- data.frame(fy, company, revenue,margin)
View(Data)
dim(Data)
myresults <- Data %>% group_by(company) %>%  mutate(highestMargin= max(margin), lowestMargin= max(margin))
myresults <- Data %>% group_by(company) %>%  mutate(highestMargin= max(margin), lowestMargin= max(margin))
View(myresults)
for(i in 1:dim(Data)[1]){
Data$margin[i]=Data$margin[i]+i
}
View(Data)
myresults1 <- Data %>% group_by(company) %>%  summarise(bestMargin= max(margin))
View(myresults1)
fy <-rep(c(1999,1991,2001),3)
company <- c(rep("png",3),rep("hul",3),rep("marico",3))
revenue <- c(1123,1254,4561,1423,1568,12369,1587,12458,4578)
margin <- c(11,12,13,14,15,16,17,18,19)
Data <- data.frame(fy, company, revenue,margin)
Data$cost= Data$revenue*(100-Data$margin)/100
View(Data)
data2 <- aggregate(cbind(average_cost=costcat)+ company, Data)
Data$costcat= ifelse(Data$cost> 8000, "yes", ifelse(Data$cost<8000,"No"))
Data$costcat= ifelse(Data$cost> 8000, "yes", ifelse(Data$cost<8000,"no"))
Data$costcat= ifelse(Data$cost> 8000, "High", ifelse(Data$cost>5000,"Medium", "Low"))
View(Data)
Data$costcat= ifelse(Data$cost> 8000, "Yes", ifelse(Data$cost>5000,"No"))
Data$costcat= ifelse(Data$cost> 8000, "Yes", ifelse(Data$cost>5000,"No","Low"))
View(Data)
Data$costcat= ifelse(Data$cost> 8000, "Yes", ifelse(Data$cost>5000,"Low","No"))
View(Data)
Data$cost= Data$revenue*(100-Data$margin)/100
avg_cost <- Data %>% group_by(company) %>%  summarise(average_cost= mean(cost))
Data$avg_cost <- Data %>% group_by(company) %>%  summarise(average_cost= mean(cost))
View(Data)
fy <-rep(c(1999,1991,2001),3)
company <- c(rep("png",3),rep("hul",3),rep("marico",3))
revenue <- c(1123,1254,4561,1423,1568,12369,1587,12458,4578)
margin <- c(11,12,13,14,15,16,17,18,19)
Data <- data.frame(fy, company, revenue,margin)
Data$cost= Data$revenue*(100-Data$margin)/100
myresults <- Data %>% group_by(company) %>%  mutate(highestMargin= max(margin), lowestMargin= max(margin))
myresults <- Data %>% group_by(company) %>%  mutate(highestMargin= max(margin), lowestMargin= max(margin))
fy <-rep(c(1999,1991,2001),3)
company <- c(rep("png",3),rep("hul",3),rep("marico",3))
revenue <- c(1123,1254,4561,1423,1568,12369,1587,12458,4578)
margin <- c(11,12,13,14,15,16,17,18,19)
Data <- data.frame(fy, company, revenue,margin)
Data$cost= Data$revenue*(100-Data$margin)/100
View(Data)
myresults <- Data %>% group_by(company) %>%  mutate(highestMargin= max(margin), lowestMargin= max(margin))
library(dplyr)
myresults <- Data %>% group_by(company) %>%  mutate(highestMargin= max(margin), lowestMargin= max(margin))
View(myresults)
Data$avg_cost <- Data %>% group_by(company) %>%  summarise(average_cost= mean(cost))
avg_cost <- Data %>% group_by(company) %>%  summarise(average_cost= mean(cost))
View(avg_cost)
avg_cost$highcost=ifelse(avg_cost$average_cost>10000,"YES","NO")
a[1:2]
x=a[1:3]
matrix1[4,3]
growth.rate(x, lag = 3) == 100 * ((x[t]/x[t-3]) - 1) * (4/3)
growth= c(100,105,118,125,137)
growth= c(100,105,118,125,137)
growth_rate = growth %>%
# first sort by year
arrange(year) %>%
mutate(Diff_year = year - lag(year),  # Difference in time (just in case there are gaps)
Diff_growth = route - lag(route), # Difference in route between years
Rate_percent = (Diff_growth / Diff_year)/route * 100)
a= c(100,105,118,125,137)
a
a=x
agrowth_rate= function(x){
a=x
a= c(100,105,118,125,137)
growth_rate= function(x){
a=x
b= c(NA,a)
b=b[-length(b)]
g=(a-b)/b
g=mean(g,na.rm = TRUE)
return(g)
}
a= c(100,105,118,125,137)
growth_rate= function(x){
a=x
b= c(NA,a)
b=b[-length(b)]
g=(a-b)/b
g=mean(g,na.rm = TRUE)
return(g)
}
growth_rate(x)
a= c(100,105,118,125,137)
growth_rate= function(x){
a=x
b= c(NA,a)
b=b[-length(b)]
g=(a-b)/b
g=mean(g,na.rm = TRUE)
return(g)
}
growth_rate(x)
a= c(100,105,118,125,137)
growth_rate= function(x){
a=x
b= c(NA,a)
b=b[-length(b)]
g=(a-b)/b
g=mean(g,na.rm = TRUE)
return(g)
}
growth_rate(x)
a= c(100,105,118,125,137)
growth_rate= function(x){
a=x
b= c(NA,a)
b=b[-length(b)]
g=(a-b)/b
g=mean(g,na.rm = TRUE)
return(g)
}
growth_rate(a)
a= c(100,105,118,125,137)
View(growth_rate)
growth_rate(a)
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "75ffc4989df8001de43a", secret = "389877827ca7031f4586a37206816ec5152088dc")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
datashare <- which(sapply(output, FUN=function(X) "datasharing" %in% X))
datashare
as.numeric(req)
list(output[[15]]$name, output[[15]]$created_at)
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
install.packages("sqldf")
library(sqldf)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile = "acs.csv")
acs <- read.csv("acs.csv")
head(acs)
detach("package:RMySQL", unload=TRUE)
sqldf("select pwgtp1 from acs where AGEP < 50")
htmlUrl <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(htmlUrl)
close(htmlUrl)
head(htmlCode)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
install.packages("ISLR")
library(ISLR)
set.seed(1)
train= sample(392,196)
attach(Auto)
lm.fit= lm(mpg~horsepower,data = Auto,subset = train)
attach(Auto)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
length(train)
lm.fit2= lm(mpg~poly(horsepower,2), data = Auto,subset = train)
lm.fit3= lm(mpg~poly(horsepower,3), data = Auto,subset = train)
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
glm.fit= glm(mpg~horsepower,data = Auto)
View(glm.fit)
summary(glm.fit)
cv.err=cv.glm(Auto,glm.fit)
install.packages("boot")
library(boot)
glm.fit= glm(mpg~horsepower,data = Auto)
cv.err=cv.glm(Auto,glm.fit)
cv.err$delta
cv.error= rep(0,5)
for (i in 1:5){
glm.fit= glm(mpg~poly(horsepower,i) ,data = Auto)
cv.error[i]= cv.glm(Auto,glm.fit)$delta[1]
}
cv.error
install.packages("tree")
install.packages(c("backports", "BH", "bit", "bit64", "caret", "cli", "curl", "data.table", "Deriv", "digest", "dplyr", "e1071", "ellipsis", "fansi", "foreach", "forecast", "fracdiff", "glue", "gower", "gplots", "gtools", "ipred", "isoband", "iterators", "jsonlite", "lava", "lmtest", "lubridate", "magick", "MASS", "matrixStats", "mime", "ModelMetrics", "numDeriv", "openssl", "pkgbuild", "pkgconfig", "pkgload", "plyr", "processx", "prodlim", "ps", "purrr", "quadprog", "quantmod", "R6", "Rcpp", "RcppArmadillo", "recipes", "reshape2", "rlang", "rpart.plot", "scales", "slam", "SnowballC", "SQUAREM", "stringi", "sys", "textshape", "tibble", "tidyr", "tidyselect", "tm", "tseries", "TTR", "vctrs", "withr", "xml2", "xts", "zoo"))
install.packages("tree")
install.packages("tree")
library(data.tree)
setwd("F:/important docs/DataScienceHandson/Session 25 and 26-20200814T063622Z-001/Session 25 and 26/chaid and cart")
wine <- read.csv("winequality-white.csv",sep=";")
str(wine)
hist(wine$quality)
View(wine)
wine_train <- wine[1:3750, ]
wine_test <- wine[3751:4898, ]
library(rpart)
m.rpart <- rpart(quality ~ ., data = wine_train)
m.rpart
colnames(wine) <- c("fixed.acidity","citric.acid")
View(wine)
wine <- read.csv("winequality-white.csv",sep=";")
View(wine)
colnames(wine) <- c(,0:2)
wine <- c(,0:2)
ed_exp1 <- wine[c(10:21),c(2,6:7)]
View(ed_exp1)
library(rpart.plot)
rpart.plot(m.rpart, digits = 3)
rpart.plot(m.rpart, digits = 2)
p.rpart <- predict(m.rpart, wine_test)
cor(p.rpart, wine_test$quality)
MAE <- function(actual, predicted) {
mean(abs(actual - predicted))
}
MAE(p.rpart, wine_test$quality)
