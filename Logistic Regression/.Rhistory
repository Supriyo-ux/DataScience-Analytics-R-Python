install.packages(xgboost)
install.packages("xgboost")
setwd("D:/Learning center/Coaching/LinearRegressionf")
setwd("D:/Learning center/Coaching/LinearRegressionf")
setwd("D:/Learning center/Coaching/LinearRegressionf")
setwd("fD:\\Learning center\\Coaching\\LinearRegressionf")
setwd("fD:\\Learning center\\Coaching\\LinearRegressionf")
setwd('D:\\Learning center\\Coaching\\LinearRegressionf')
setwd("D:\\Learning center\\Coaching\\LinearRegressionf")
step.m <-stepAIC(m,trace = T)
#setwd("D:\\Learning centre\\Coaching\\iitkgp\\LOGISTIC")
#Library
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(ROCR)
#Data original
data_or<-read.csv("GermanCredit.csv")
#data_prep
data1 <- data_or
#data1$Owned.Property <- as.factor(data1$Owned.Property)
data1$Age <- as.numeric(data1$Age)
data1$Credit.amount<-as.numeric(data1$Credit.amount)
data1$Credit.amount<-as.factor(ifelse(data1$Credit.amount<=2500,'0-
2500',ifelse(data1$Credit.amount<=5000,'2600-5000','5000+')))
#data1 <- data1[,-c(5)]
set.seed(100)
train_index <- createDataPartition(data1$Default,p=0.8,list=F)
train <- data1[train_index,]
test <- data1[-train_index,]
m<-glm(Default~.,data=train,family=binomial())
#m.step <- stepAIC(m, trace = T)
pred <- as.data.frame(predict(m,type = "response",test))
names(pred)[1] <- "prediction"
test$prediction <- ifelse(pred$prediction>0.5,1,0)
#score test data set
#test$score<-predict(m,type='response',test)
#pred<-prediction(test$score,test$Default)
#perf <- performance(pred,"tpr","fpr")
#plot(perf)
#diff <- max(attr(perf,'y.values')[[1]]-attr(perf,'x.values')[[1]])
a <- confusionMatrix(as.factor(test$prediction), as.factor(test$Default),positive="1")
setwd("D:/Learning center/Coaching/LogisticeModel")
#Library
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(ROCR)
#Data original
data_or<-read.csv("GermanCredit.csv")
#data_prep
data1 <- data_or
#data1$Owned.Property <- as.factor(data1$Owned.Property)
data1$Age <- as.numeric(data1$Age)
data1$Credit.amount<-as.numeric(data1$Credit.amount)
data1$Credit.amount<-as.factor(ifelse(data1$Credit.amount<=2500,'0-
2500',ifelse(data1$Credit.amount<=5000,'2600-5000','5000+')))
#data1 <- data1[,-c(5)]
set.seed(100)
train_index <- createDataPartition(data1$Default,p=0.8,list=F)
train <- data1[train_index,]
test <- data1[-train_index,]
m<-glm(Default~.,data=train,family=binomial())
pred <- as.data.frame(predict(m,type = "response",test))
names(pred)[1] <- "prediction"
test$prediction <- ifelse(pred$prediction>0.5,1,0)
a <- confusionMatrix(as.factor(test$prediction), as.factor(test$Default),positive="1")
#AIC
library(magrittr)
step.m <-stepAIC(m,trace = T)
summary(step.m)
coef(step.m)
pred.m <- as.data.frame(predict(step.m,type = "response",test))
names(pred.m)[1] <- "prediction"
test$prediction.m <- ifelse(pred.m$prediction>0.5,1,0)
c1 <- confusionMatrix(as.factor(test$prediction.m), as.factor(test$Default),positive="1")
c1
l <- seq(0.1, 1, by=0.0005)
for (i in c(1:(length(l)-2)))
{
pred.m <- as.data.frame(predict(step.m,type = "response",test))
names(pred.m)[1] <- "prediction"
test$prediction.m <- ifelse(pred.m$prediction>l[i],1,0)
c1 <- confusionMatrix(as.factor(test$prediction.m), as.factor(test$Default),positive="1")
sens <- c1$byClass[1]
one_min_spe <- 1-c1$byClass[2]
if(i==1)
{roc_data <- as.data.frame(cbind(l[i],sens,one_min_spe))
names(roc_data)[1] <- "cutoff"
names(roc_data)[2] <- "sensitivity"
names(roc_data)[3] <- "one_minus_specificity"
}
else
{roc_data_1 <- as.data.frame(cbind(l[i],sens,one_min_spe))
names(roc_data_1)[1] <- "cutoff"
names(roc_data_1)[2] <- "sensitivity"
names(roc_data_1)[3] <- "one_minus_specificity"
roc_data <- rbind(roc_data,roc_data_1)
rm(roc_data_1)
}
}
roc_data_sorted <- roc_data[order(roc_data$one_minus_specificity),]
#ROCR plot
plot(roc_data_sorted$one_minus_specificity,roc_data_sorted$sensitivity,type="l",
xlab="1-specifity",ylab="sensitivity",main="ROC curve")
roc_data_sorted_copy <- roc_data_sorted
roc_data_sorted_copy$dist <- roc_data_sorted_copy$sensitivity-roc_data_sorted_copy$one_minus_specificity
roc_data_sorted_copy <- roc_data_sorted_copy[order(-roc_data_sorted_copy$dist),]
View(roc_data_sorted_copy)
set.seed(100)
train_index <- createDataPartition(data1$Default,p=0.8,list=F)
train <- data1[train_index,]
test <- data1[-train_index,]
#score test data set
test$score<-predict(step.m,type='response',test)
pred<-prediction(test$score,test$Default)
perf <- performance(pred,"tpr","fpr")
plot(perf)
diff <- max(attr(perf,'y.values')[[1]]-attr(perf,'x.values')[[1]])
df_cutoff <- cbind.data.frame(perf@x.values,perf@y.values,perf@alpha.values)
names(df_cutoff) <- c("sensitivity","1-specificity","cutoff")
df_cutoff$dist <- df_cutoff$sensitivity-df_cutoff$`1-sensitivity`
df_cutoff_sort <- df_cutoff[order(-df_cutoff$dist),]
df_cutoff_sort
df_cutoff <- cbind.data.frame(perf@x.values,perf@y.values,perf@alpha.values)
names(df_cutoff) <- c("sensitivity","1-specificity","cutoff")
set.seed(100)
train_index <- createDataPartition(data1$Default,p=0.8,list=F)
train <- data1[train_index,]
test <- data1[-train_index,]
#score test data set
test$score<-predict(step.m,type='response',test)
pred<-prediction(test$score,test$Default)
perf <- performance(pred,"tpr","fpr")
plot(perf)
diff <- max(attr(perf,'y.values')[[1]]-attr(perf,'x.values')[[1]])
df_cutoff <- cbind.data.frame(perf@x.values,perf@y.values,perf@alpha.values)
names(df_cutoff) <- c("sensitivity","1-specificity","cutoff")
df_cutoff$dist <- df_cutoff$sensitivity-df_cutoff$`1-sensitivity`
df_cutoff_sort <- df_cutoff[order(-df_cutoff$dist),]
df_cutoff <- cbind.data.frame(perf@x.values,perf@y.values,perf@alpha.values)
names(df_cutoff) <- c("sensitivity","1-specificity","cutoff")
df_cutoff$dist <- df_cutoff$sensitivity-df_cutoff$`1-sensitivity`
set.seed(100)
train_index <- createDataPartition(data1$Default,p=0.8,list=F)
train <- data1[train_index,]
test <- data1[-train_index,]
#score test data set
test$score<-predict(step.m,type='response',test)
#score test data set
test$score<-predict(step.m,type='response',test)
test
pred<-prediction(test$score,test$Default)
perf <- performance(pred,"tpr","fpr")
plot(perf)
diff <- max(attr(perf,'y.values')[[1]]-attr(perf,'x.values')[[1]])
diff
df_cutoff <- cbind.data.frame(perf@x.values,perf@y.values,perf@alpha.values)
names(df_cutoff) <- c("sensitivity","1-specificity","cutoff")
df_cutoff$dist <- df_cutoff$sensitivity-df_cutoff$`1-sensitivity`
df_cutoff
df_cutoff$sensitivity-df_cutoff$`1-sensitivity`
names
namjes(df_cutoff)
names(df_cutoff)
df_cutoff$dist <- df_cutoff$sensitivity-df_cutoff$`1-specificity`
df_cutoff_sort <- df_cutoff[order(-df_cutoff$dist),]
df_cutoff_sort
diff
df_cutoff_sort
df_cutoff_sort <- df_cutoff[order(df_cutoff$dist),]
df_cutoff_sort
attach(df_cutoff)
df_cutoff[order(df_cutoff$dist),]
df_cutoff[order(dist),]
df_cutoff[order(-dist),]
attach(df_cutoff)
detach(df_cutoff)
detach(df_cutoff)
df_cutoff[order(-dist),]
df_cutoff$dist <- abs(df_cutoff$sensitivity-df_cutoff$`1-specificity`)
df_cutoff[order(-dist),]
attach(df_cutoff)
df_cutoff[order(-dist),]
detach(df_cutoff)
library("ISLR")
library("tibble")
install.packages("ISLR")
install.packages("tibble")
inputData <- read.csv("http://rstatistics.net/wp-content/uploads/2015/09/adult.csv")
View(inputData)
rdata<-read.csv("http://rstatistics.net/wp-content/uploads/2015/09/adult.csv")
View(rdata)
skim(rdata)
install.packages("skimr")
skim(rdata)
# Loading of dataset for regression analysis in R
library(skimr)
library(stargazer)
install.packages("stargazer")
skim(rdata)
lMod <- lm(CAPITALGAIN ~ RELATIONSHIP + AGE + ABOVE50K + OCCUPATION + EDUCATIONNUM,
data=rdata)
rdata<-read.csv("http://rstatistics.net/wp-content/uploads/2015/09/adult.csv")
lMod <- lm(CAPITALGAIN ~ RELATIONSHIP + AGE + ABOVE50K + OCCUPATION + EDUCATIONNUM,
data=rdata)
View(rdata)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse) # data manipulation and visualization
library(modelr)     # provides easy pipeline modeling functions
library(broom)  # helps to tidy up model outputs
(default <- as_tibble(ISLR::Default))
View(default)
write.csv(default,"default_student_amnalysis.csv")
default <- read.csv("default_student_analysis",header = T)
setwd("D:/Learning center/Coaching/LogisticeModel")
default <- read.csv("default_student_analysis",header = T)
default <- read.csv("default_student_analysis.csv",header = T)
write.csv(default,"default_student_amnalysis.csv")
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(default), replace = T, prob = c(0.6,0.4))
train <- default[sample, ]
test <- default[!sample, ]
#Library
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
#Data original
data_or<-read.csv("GermanCredit.csv")
library(ROCR)
#data_prep
data1 <- data_or
#data1$Owned.Property <- as.factor(data1$Owned.Property)
data1$Age <- as.numeric(data1$Age)
data1$Credit.amount<-as.numeric(data1$Credit.amount)
setwd("F:/important docs/DataScienceHandson/Session 16 to 18-20201004T154544Z-001/Session 16 to 18")
#Library
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(ROCR)
#Data original
data_or<-read.csv("GermanCredit.csv")
View(data_or)
setwd("F:/important docs/DataScienceHandson/Session 16 to 18-20201004T154544Z-001/Session 16 to 18")
Credit.amount
#Library
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(ROCR)
#Data original
data_or<-read.csv("GermanCredit.csv")
#data_prep
data1 <- data_or
#data1$Owned.Property <- as.factor(data1$Owned.Property)
data1$Age <- as.numeric(data1$Age)
data1$Credit.amount<-as.numeric(data1$Credit.amount)
data1$Credit.amount<-as.factor(ifelse(data1$Credit.amount<=2500,'0-
2500',ifelse(data1$Credit.amount<=5000,'2600-5000','5000+')))
View(data1)
