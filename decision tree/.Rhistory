install.packages("E:/softwares/R/SDSFoundations_1.1.zip", repos = NULL, type = "win.binary")
library("SDSFoundations", lib.loc="~/R/win-library/3.4")
13+5
source('~/.active-rstudio-document')
a=13
a
remove(a)
y <- 1:10
y <- 1:10
x1 <- as.integer(2.00)
my.name <- as.integer(2.00)
my.number <- as.integer(readline(prompt = "Enter name:"))
for(i in c(1:nrow(my.number))){
my.number <- as.integer(readline(prompt = "Enter number:"))
}
install.packages("E:/softwares/R/SDSFoundations_1.1.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/user/Desktop/caret_6.0-82.zip", repos = NULL, type = "win.binary")
library(caret)
version
install.packages("tm")
install.packages("wordcloud")
install.packages("gmodels")
install.packages("e1071")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("e1071")
install.packages("randomForest")
1-(5/14)(5/14)-(9/14)(9/14)
1-(5/14)*(5/14)-(9/14)*(9/14)
12/25
(5/14)*0.48
(8/14)*(6/16)
setwd("C:\\Users\\user\\Desktop\\data analytics\\decision tree")
library(rpart)
library(rpart.plot)
library(caret)
library(lattice)
library(ggplot2)
treedata <- read.csv("Decisiontree.csv", header=TRUE)
View(treedata)
View(treedata)
dim(treedata)
treedata[inTrain,]
library(caret)
inTrain <- createDataPartition(y=Species, p=0.6, list=TRUE)
inTrain <- createDataPartition(y=treedata$Quality_Category, p=0.6, list=TRUE)
treedata[inTrain,]
inTrain
treedata <- read.csv("Decisiontree.csv", header=TRUE)
treedata[inTrain,]
inTrain <- createDataPartition(y=treedata$Quality_Category, p=0.6, list=F)
treedata[inTrain,]
treedata[inTrain,]
training <- treedata[inTrain,]
view(training)
treedata <- read.csv("Decisiontree.csv", header=TRUE)
dim(treedata)
library(caret)
inTrain <- createDataPartition(y=treedata$Quality_Category, p=0.6, list=F)
training <- treedata[inTrain,]
View(training)
View(training)
test <- treedata[inTrain,]
prop.table((table(training$Quality_Category))
prop.table((table(treedata$Quality_Category))
)
prop.table((table(training$Quality_Category)))
tree <- rpart(Quality_Category~  fixedacidity + volatileacidity +
citricacid + residualsugar + chlorides + freesulfurdioxide +
totalsulfurdioxide + density + pH + sulphates + alcohol,
data = training, method="class",parms=list(split="gini"))
prp(tree, main="White Wine Quality",
extra=106, # display prob of survival and percent of obs
nn=TRUE, # display the node numbers
fallen.leaves=TRUE, # put the leaves on the bottom of the page
#shadow.col="gray", # shadows under the leaves
branch.lty=3, # draw branches using dotted lines
branch=.5, # change angle of branch lines
faclen=1, # faclen=0 to print full factor names
trace=1, # print the automatically calculated cex
split.cex=1, # make the split text larger than the node text
split.prefix="is ", # put "is " before split text
split.suffix="?", # put "?" after split text
#col=cols, border.col=cols, # green if survived
split.box.col="lightgreen", # lightgray split boxes (default is white)
split.border.col="black", # darkgray border on split boxes
split.round=.5 ,# round the split box corners
cex=0.6)
library(randomForest)
library(lattice)
library(ggplot2)
library(caret)
library(e1071)
setwd("C:\\Users\\user\\Desktop\\data analytics\\decision tree")
termCrosssell<-read.csv(file="bank-full.csv",header = T)
View(termCrosssell)
termCrosssell<-read.csv(file="bank-full.csv",header = T)
names(termCrosssell)
sample.ind <- sample(2,
nrow(termCrosssell),
replace = T,
prob = c(0.6,0.4))
cross.sell.dev <- termCrosssell[sample.ind==1,]
cross.sell.val <- termCrosssell[sample.ind==2,]
varNames <- names(cross.sell.dev)
varNames <- varNames[!varNames %in% c("y")]
varNames1 <- paste(varNames, collapse = "+")
rf.form <- as.formula(paste("y", varNames1, sep = " ~ "))
cross.sell.rf <- randomForest(rf.form,
cross.sell.dev,
ntree=500,
importance=T)
out
view(out)
out <- cbind.data.frame(1,cnf$byClass[[1]],cnf$byClass[[3]],cnf$overall[[1]])
library(randomForest)
library(lattice)
library(ggplot2)
library(caret)
library(e1071)
setwd("C:\\Users\\user\\Desktop\\data analytics\\decision tree")
#setwd("D:\\Learning centre\\Coaching\\iitkgp\\DecisionTree\\New folder")
## Read data
termCrosssell<-read.csv(file="bank-full.csv",header = T)
## Explore data frame
names(termCrosssell)
#for(i in 1:10)
#{set.seed(i)
sample.ind <- sample(2,
nrow(termCrosssell),
replace = T,
prob = c(0.6,0.4))
cross.sell.dev <- termCrosssell[sample.ind==1,]
cross.sell.val <- termCrosssell[sample.ind==2,]
#Stratified sampling
#inTrain <- createDataPartition(data$left, p=0.6, list=FALSE)
#training.data <- data[inTrain,]
#testing.data <- data[-inTrain,]
#dim(training.data)
varNames <- names(cross.sell.dev)
# Exclude ID or Response variable
varNames <- varNames[!varNames %in% c("y")]
# add + sign between exploratory variables
varNames1 <- paste(varNames, collapse = "+")
# Add response variable and convert to a formula object
rf.form <- as.formula(paste("y", varNames1, sep = " ~ "))
cross.sell.rf <- randomForest(rf.form,
cross.sell.dev,
ntree=500,
importance=T)
#plot(cross.sell.rf)
# Predicting response variable
cross.sell.val$predicted.response <- predict(cross.sell.rf ,cross.sell.val)
# Create Confusion Matrix
cnf <- confusionMatrix(data=cross.sell.val$predicted.response,
reference=cross.sell.val$y,
positive='yes')
out <- cbind.data.frame(1,cnf$byClass[[1]],cnf$byClass[[3]],cnf$overall[[1]])
names(out)[1] <- paste("SampleID")
names(out)[1] <- paste("Accuracy")
names(out)[1] <- paste("Sensitivity")
names(out)[1] <- paste("Precision")
out
View(out)
varImpPlot(cross.sell.rf,
sort = T,
main="Variable Importance",
n.var=5)
varImpPlot(cross.sell.rf,
sort = T,
main="Variable Importance",
n.var=5)
var.imp <- data.frame(importance(cross.sell.rf,
type=2))
var.imp$Variables <- row.names(var.imp)
var.imp[order(var.imp$MeanDecreaseGini,decreasing = T),]
cross.sell.dev$predicted.response <- predict(cross.sell.rf ,cross.sell.dev)
confusionMatrix(data=cross.sell.dev$predicted.response,
reference=cross.sell.dev$y,
positive='yes')
