install.packages("E:/softwares/R/SDSFoundations_1.1.zip", repos = NULL, type = "win.binary")
library("SDSFoundations", lib.loc="~/R/win-library/3.4")
13+5
source('~/.active-rstudio-document')
a=13
a
remove(a)
y <- 1:10
y <- 1:10
x1 <- as.integer(2.00)
my.name <- as.integer(2.00)
my.number <- as.integer(readline(prompt = "Enter name:"))
for(i in c(1:nrow(my.number))){
my.number <- as.integer(readline(prompt = "Enter number:"))
}
install.packages("E:/softwares/R/SDSFoundations_1.1.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/user/Desktop/caret_6.0-82.zip", repos = NULL, type = "win.binary")
library(caret)
version
setwd("C:\\Users\\user\\Desktop\\data analytics\\class4_Saptarshi_Regression")
#Library
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(ROCR)
library(gplots)
install.packages("gplots")
setwd("C:\\Users\\user\\Desktop\\data analytics\\class4_Saptarshi_Regression")
#Library
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(ROCR)
library(gplots)
data_or<-read.csv("GermanCredit.csv")
data1 <- data_or
data1$Age <- as.numeric(data1$Age)
data1$Credit.amount<-as.numeric(data1$Credit.amount)
data1$Credit.amount<-as.factor(ifelse(data1$Credit.amount<=2500,'0-
2500',ifelse(data1$Credit.amount<=5000,'2600-5000','5000+')))
set.seed(100)
train_index <- createDataPartition(data1$Default,p=0.8,list=F)
train <- data1[train_index,]
test <- data1[-train_index,]
View(train)
View(test)
m<-glm(Default~.,data=train,family=binomial())
pred <- as.data.frame(predict(m,type = "response",test))
names(pred)[1] <- "prediction"
View(pred)
test$prediction <- ifelse(pred$prediction>0.5,1,0)
View(test)
pred <- as.data.frame(predict(m,type = "response",test))
names(pred)[1] <- "prediction"
test$prediction <- ifelse(pred$prediction>0.5,1,0)
write.csv(test,"test.csv")
step.m <- m %>% stepAIC(trace = T)
step.m <-stepAIC(m,trace = T)
summary(step.m)
summary(step.m)
coef(step.m)
#AIC
step.m <-stepAIC(m,trace = T)
summary(step.m)
coef(step.m)
pred.m <- as.data.frame(predict(step.m,type = "response",test))
names(pred.m)[1] <- "prediction.m"
test$prediction.m <- ifelse(pred.m$prediction.m>0.5,1,0)
c1 <- confusionMatrix(as.factor(test$prediction.m), as.factor(test$Default),positive="1")
c1
l <- seq(0.1, 1, by=0.0005)
for (i in c(1:(length(l)-2)))
{
pred.m <- as.data.frame(predict(step.m,type = "response",test))
names(pred.m)[1] <- "prediction"
test$prediction.m <- ifelse(pred.m$prediction>l[i],1,0)
c1 <- confusionMatrix(as.factor(test$prediction.m), as.factor(test$Default),positive="1")
sens <- c1$byClass[1]
one_min_spe <- 1-c1$byClass[2]
if(i==1)
{roc_data <- as.data.frame(cbind(l[i],sens,one_min_spe))
names(roc_data)[1] <- "cutoff"
names(roc_data)[2] <- "sensitivity"
names(roc_data)[3] <- "one_minus_specificity"
}
else
{roc_data_1 <- as.data.frame(cbind(l[i],sens,one_min_spe))
names(roc_data_1)[1] <- "cutoff"
names(roc_data_1)[2] <- "sensitivity"
names(roc_data_1)[3] <- "one_minus_specificity"
roc_data <- rbind(roc_data,roc_data_1)
rm(roc_data_1)
}
}
roc_data_sorted <- roc_data[order(roc_data$one_minus_specificity),]
#ROCR plot
plot(roc_data_sorted$one_minus_specificity,roc_data_sorted$sensitivity,type="l")
library(gplots)
View(roc_data_sorted)
plot(roc_data_sorted$one_minus_specificity,roc_data_sorted$sensitivity,type="l")
plot(roc_data_sorted$one_minus_specificity,roc_data_sorted$sensitivity,xlab="1-specivity",ylab="sensitivity",
type="l",main="ROC Curve")
roc_data_sorted <- roc_data_sorted$sensitivity-roc_data_sorted$one_minus_specificity
View(roc_data_sorted)
roc_data_sorted$Dist <- roc_data_sorted$sensitivity-roc_data_sorted$one_minus_specificity
roc_data_sorted$Dist <- roc_data_sorted$sensitivity-roc_data_sorted$one_minus_specificity
roc_data_sorted$Dist <- roc_data_sorted$sensitivity-roc_data_sorted$one_minus_specificity
roc_data_sorted <- roc_data[order(roc_data$one_minus_specificity),]
roc_data_sorted$Dist <- roc_data_sorted$sensitivity-roc_data_sorted$one_minus_specificity
roc_data_sorted <- roc_data_sorted[order(-roc_data_sorted$Dist,)]
test$final_prediction <- ifelse(pred.m$prediction>roc_data_sorted[1,1],1,0)
names(test)[24] <- "Final Prediction"
c1 <- confusionMatrix(as.factor(test$final_prediction), as.factor(test$Default),positive="1")
test$final_prediction <- ifelse(pred.m$prediction>roc_data_sorted[1,1],1,0)
c1 <- confusionMatrix(as.factor(test$final_prediction), as.factor(test$Default),positive="1")
c1$byClass
