install.packages("E:/softwares/R/SDSFoundations_1.1.zip", repos = NULL, type = "win.binary")
library("SDSFoundations", lib.loc="~/R/win-library/3.4")
13+5
source('~/.active-rstudio-document')
a=13
a
remove(a)
y <- 1:10
y <- 1:10
x1 <- as.integer(2.00)
my.name <- as.integer(2.00)
my.number <- as.integer(readline(prompt = "Enter name:"))
for(i in c(1:nrow(my.number))){
my.number <- as.integer(readline(prompt = "Enter number:"))
}
install.packages("E:/softwares/R/SDSFoundations_1.1.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/user/Desktop/caret_6.0-82.zip", repos = NULL, type = "win.binary")
library(caret)
version
install.packages("TTR")
install.packages("forecast")
install.packages("ROCR")
##recreating the same test set
set.seed(100)
train_index <- createDataPartition(data1$Default,p=0.8,list=F)
train <- data1[train_index,]
test <- data1[-train_index,]
#score test data set
test$score<-predict(step.m,type='response',test)
##prediction object
pred<-prediction(test$score,test$Default)
#Performance function
perf <- performance(pred,"tpr","fpr")
##ROC curve
plot(perf)
diff <- max(attr(perf,'y.values')[[1]]-attr(perf,'x.values')[[1]])
setwd("C:\\Users\\user\\Desktop\\data analytics\\class4_Saptarshi_Regression")
#Library
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(ROCR)
library(gplots)
#Data original
data_or<-read.csv("GermanCredit.csv")
#data_prep
data1 <- data_or
#data1$Owned.Property <- as.factor(data1$Owned.Property)
data1$Age <- as.numeric(data1$Age)
data1$Credit.amount<-as.numeric(data1$Credit.amount)
data1$Credit.amount<-as.factor(ifelse(data1$Credit.amount<=2500,'0-
2500',ifelse(data1$Credit.amount<=5000,'2600-5000','5000+')))
#data1 <- data1[,-c(5)]
set.seed(100)
train_index <- createDataPartition(data1$Default,p=0.8,list=F)
train <- data1[train_index,]
test <- data1[-train_index,]
m<-glm(Default~.,data=train,family=binomial())
#m.step <- stepAIC(m, trace = T)
pred <- as.data.frame(predict(m,type = "response",test))
names(pred)[1] <- "prediction"
test$prediction <- ifelse(pred$prediction>0.5,1,0)
#score test data set
#test$score<-predict(m,type='response',test)
#pred<-prediction(test$score,test$Default)
#perf <- performance(pred,"tpr","fpr")
#plot(perf)
#diff <- max(attr(perf,'y.values')[[1]]-attr(perf,'x.values')[[1]])
confusionMatrix(as.factor(test$prediction), as.factor(test$Default),positive="1")
#AIC
step.m <-stepAIC(m,trace = T)
summary(step.m)
coef(step.m)
pred.m <- as.data.frame(predict(step.m,type = "response",test))
names(pred.m)[1] <- "prediction.m"
test$prediction.m <- ifelse(pred.m$prediction.m>0.5,1,0)
c1 <- confusionMatrix(as.factor(test$prediction.m), as.factor(test$Default),positive="1")
##recreating the same test set
set.seed(100)
train_index <- createDataPartition(data1$Default,p=0.8,list=F)
train <- data1[train_index,]
test <- data1[-train_index,]
#score test data set
test$score<-predict(step.m,type='response',test)
##prediction object
pred<-prediction(test$score,test$Default)
#Performance function
perf <- performance(pred,"tpr","fpr")
plot(perf)
diff <- max(attr(perf,'y.values')[[1]]-attr(perf,'x.values')[[1]])
df_cutoff <- cbind.data.frame(perf@x.values,perf@y.values,perf@alpha.values)
names(df_cutoff) <- c("sensitivity","1-specificity","cutoff")
df_cutoff$dist <- df_cutoff$sensitivity-df_cutoff$`1-sensitivity`
df_cutoff_sort <- df_cutoff[order(-df_cutoff$dist),]
df_cutoff_sort
diff <- max(attr(perf,'y.values')[[1]]-attr(perf,'x.values')[[1]])
df_cutoff <- cbind.data.frame(perf@x.values,perf@y.values,perf@alpha.values)
names(df_cutoff) <- c("sensitivity","1-specificity","cutoff")
df_cutoff$dist <- df_cutoff$sensitivity-df_cutoff$`1-sensitivity`
df_cutoff <- cbind.data.frame(perf@x.values,perf@y.values,perf@alpha.values)
names(df_cutoff) <- c("1-specificity","sensitivity","cutoff")
df_cutoff$dist <- df_cutoff$sensitivity-df_cutoff$`1-sensitivity`
data()
data(GermanCredit)
View(GermanCredit)
setwd("C:\\Users\\user\\Desktop\\data analytics\\7.04.19_Time series")
tsdata <- read.csv("Timeseriesdata_7.29.16.csv",header=T)
View(tsdata)
myvector <- tsdata$EmployedWomen
setwd("C:\\Users\\user\\Desktop\\data analytics\\7.04.19_Time series")
tsdata <- read.csv("Timeseriesdata_7.29.16.csv",header=T)
myvector <- tsdata$EmployedWomen
myts <- ts(myvector,start=c(1964,1),end=c(2016,5),frequency = 12)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
setwd("C:\\Users\\user\\Desktop\\data analytics\\7.04.19_Time series")
tsdata <- read.csv("Timeseriesdata_7.29.16.csv",header=T)
myvector <- tsdata$EmployedWomen
myts <- ts(myvector,start=c(1964,1),end=c(2016,5),frequency = 12)
#Frequency
#Annual:1
#Quarterly:4
#Monthly:12
library(dplyr)
d <- 1:10
d1 <- lag(d, 2)
cbind(d,d1)
d2 <- lead(d, 2)
cbind(d,d2)
acf(myvector,lag.max = 12)
acf(myvector,lag.max = 12,type = "partial")
acf(myvector,lag.max = 30,type = "partial")
acf(myvector,lag.max = 30)
acf(myvector,lag.max = 30,type = "partial")
acf(myvector,lag.max = 30)
acf(myvector,lag.max = 30,type = "partial")
setwd("C:\\Users\\user\\Desktop\\data analytics\\7.04.19_Time series")
tsdata <- read.csv("Timeseriesdata_7.29.16.csv",header=T)
myvector <- tsdata$EmployedWomen
myts <- ts(myvector,start=c(1964,1),end=c(2016,5),frequency = 12)
#Frequency
#Annual:1
#Quarterly:4
#Monthly:12
#Weekly:52
###############Example Lag and Lead Start#################################
#set.seed(123)
#x <- sample(c(1:9), 10, replace = T)
#y <- lag(x, 2)
#require(zoo)
library(dplyr)
d <- 1:10
d1 <- lag(d, 2)
d2 <- lead(d, 2)
#x <- zoo(sample(c(1:9), 10, replace = T))
#################Example Lag End##################################
#lagged_ts=lag(myts,k=-2,na.pad=FALSE)
########################ACF#############################
acf(myvector,lag.max = 30)
acf(myvector,lag.max = 30,type = "partial")
myvector <- tsdata$EmployedWomen
acf(myvector,lag.max = 30)
a <- acf(myvector,lag.max = 30)
str(a)
setwd("C:\\Users\\user\\Desktop\\data analytics\\7.04.19_Time series")
tsdata <- read.csv("Timeseriesdata_7.29.16.csv",header=T)
myvector <- tsdata$EmployedWomen
myts <- ts(myvector,start=c(1964,1),end=c(2016,5),frequency = 12)
plot.ts(myvector, xlab="month" , ylab="EmployedWomen")
decompose_myts = decompose(myts, "multiplicative")
plot(as.ts(decompose_myts$seasonal))
plot(as.ts(decompose_myts$trend))
plot(as.ts(decompose_myts$random))
plot(as.ts(decompose_myts$seasonal))
plot(as.ts(decompose_myts$trend))
plot(as.ts(decompose_myts$random))
plot(decompose_myts)
setwd("C:\\Users\\user\\Desktop\\data analytics\\7.04.19_Time series")
#Decompose
tsdata <- read.csv("Timeseriesdata_7.29.16.csv",header=T)
myvector <- tsdata$EmployedWomen
myts <- ts(myvector,start=c(1964,1),end=c(2016,5),frequency = 12)
plot.ts(myvector, xlab="month" , ylab="EmployedWomen")
#Cpmponents of time series
decompose_myts = decompose(myts, "additive")
plot(as.ts(decompose_myts$seasonal))
plot(as.ts(decompose_myts$trend))
plot(as.ts(decompose_myts$random))
plot(decompose_myts)
decompose_myts = decompose(myts, "additive")
plot(as.ts(decompose_myts$seasonal))
plot.ts(myvector, xlab="month" , ylab="EmployedWomen")
library(TTR)
library(forecast)
setwd("C:\\Users\\user\\Desktop\\data analytics\\7.04.19_Time series")
tsdata <- read.csv("Timeseriesdata_7.29.16.csv",header=T)
myvector <- tsdata$EmployedWomen
myts <- ts(myvector,start=c(1964,1),end=c(2016,5),frequency = 12)
plot.ts(myvector, xlab="month" , ylab="EmployedWomen")
nrow(tsdata)
training <-tsdata[1:503,]
#test <- tsdata[504:629,]
test <- tsdata[504:629,]
myvector_training <- training$EmployedWomen
myvector_test <- test$EmployedWomen
#Time Series Creation: Date needs to be taken care of
trainingts <- ts(myvector_training,start=c(1964,1),end=c(2005,11),frequency = 12)
#testts <- ts(myvector_test,start=c(2005,12),end=c(2016,5),frequency = 12)
testts <- ts(myvector_test,start=c(2005,12),end=c(2016,5),frequency = 12)
SMAforecasted <- forecast(SMA(trainingts, n=2), h=10)
SMAforecasted
WMAforecasted <- forecast(WMA(trainingts, n = 3, wts = 1:3),h=10)
WMAforecasted
EMAforecasted <- forecast(EMA(trainingts,n=2, ratio =2/3),h=10)
EMAforecasted
plot(SMAforecasted)
SMAforecasted <- forecast(SMA(trainingts, n=2), h=126)
plot(SMAforecasted)
